@page "/add-new"

@rendermode InteractiveServer
@inject IProductRepository Repository
@inject NavigationManager Navigation

<PageTitle>Add new Product</PageTitle>

<div class="row justify-content-center">
    <div class="col-6">
        <EditForm FormName="AddProductForm" EditContext="@editContext">
            <DataAnnotationsValidator />
            <h3>
                Add New Product
            </h3>
            <div class="mb-3">
                <label for="name" class="form-label">
                    Name
                </label>
                <InputText id="name" @bind-Value="product.Name" class="form-control" />
                <ValidationMessage For="@(() => product.Name)" />
            </div>
            <div class="mb-3">
                <label class="form-label">
                    @if (string.IsNullOrEmpty(product.SKU))
                    {
                        <p>SKU</p>
                    }
                    else
                    {
                        <p>SKU  : @product.SKU</p>
                    }
                    <ValidationMessage For="@(() => product.SKU)" />
                </label>
                <input type="hidden" @bind="product.SKU" />
                <br />
                <button id="SKU" @onclick="GenerateUniqueSKU" class="btn btn-info" > Generate SKU </button>
            </div>
            <div class="mb-3">
                <label for="category" class="form-label">
                    Category
                </label>
                <InputSelect id="category" @bind-Value="product.Category.CategoryName" class="form-control">
                    <option value="0">Select Category</option>
                    @foreach (var category in Enum.GetValues(typeof(CategoryName)))
                    {
                        <option value="@category">
                            @category.ToString()
                        </option>
                    }
                </InputSelect>
                <CustomValidationMessage For="@(() => product.Category.CategoryName)" />
            </div>
            <div class="mb-3">
                <label for="base-price" class="form-label">
                    Base Price
                </label>
                <InputNumber id="base-price" @bind-Value="product.BasePrice" class="form-control" />
                <ValidationMessage For="@(() => product.BasePrice)" />
            </div>
            <div class="mb-3">
                <label for="mrp" class="form-label">
                    MRP
                </label>
                <InputNumber id="mrp" @bind-Value="product.MRP" class="form-control" />
                <ValidationMessage For="@(() => product.MRP)" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">
                    Description
                </label>
                <InputTextArea id="description" @bind-Value="product.Description" class="form-control" />
                <ValidationMessage For="@(() => product.Description)" />
            </div>
            <div class="mb-3">
                <label for="currency" class="form-label">
                    Currency
                </label>
                <InputSelect id="currency" @bind-Value="product.Currency" class="form-control">
                    <option value="">Select Currency</option>
                    @foreach (var currency in Enum.GetValues(typeof(CurrencyType)))
                    {
                        <option value="@currency">
                            @currency.ToString()
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => product.Currency)" />
            </div>
            <div class="mb-3">
                <button class="btn btn-primary" @onclick="AddProduct"> Submit </button>
            </div>

        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    public Product product { get; set; } = new();
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(product);
    }

    private async void AddProduct()
    {
        if (editContext.Validate())
        {
            await Repository.AddAsync(product);
            Navigation.NavigateTo("/");
        }
        else
        {
            
        }
    }

    private void GenerateUniqueSKU()
    {
        string sku;
        bool isUnique;

        do
        {
            sku = GenerateRandomSKU(6);

            isUnique = true;//!await _context.Products.AnyAsync(p => p.SKU == sku);
        }
        while (!isUnique);

        product.SKU = sku;
        StateHasChanged();
    }

    // Helper method to generate a random alphanumeric string
    private string GenerateRandomSKU(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
}
