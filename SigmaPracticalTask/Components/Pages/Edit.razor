<h3>Update Product</h3>

<div class="row justify-content-center">
    <div class="col-6">
        <EditForm FormName="UpdateProductForm" Model="ProductDetails">
            <h3>
                Update Product
            </h3>
            <div class="mb-3">
                <label for="name" class="form-label">
                    Name
                </label>
                <InputText id="name" @bind-Value="ProductDetails.Name" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">
                    @if (string.IsNullOrEmpty(ProductDetails.SKU))
                    {
                        <p>SKU</p>
                    }
                    else
                    {
                        <p>SKU  : @ProductDetails.SKU</p>
                    }


                </label>
                <input type="hidden" @bind="ProductDetails.SKU" />
                <br />
                <button id="SKU" @onclick="GenerateUniqueSKU" class="btn btn-info"> Generate SKU </button>
            </div>
            <div class="mb-3">
                <label for="category" class="form-label">
                    Category
                </label>
                <InputSelect id="category" @bind-Value="ProductDetails.Category.CategoryName" class="form-control">
                    @foreach (var category in Enum.GetValues(typeof(CategoryName)))
                    {
                        <option value="@category">
                            @category.ToString()
                        </option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="base-price" class="form-label">
                    Base Price
                </label>
                <InputNumber id="base-price" @bind-Value="ProductDetails.BasePrice" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="mrp" class="form-label">
                    MRP
                </label>
                <InputNumber id="mrp" @bind-Value="ProductDetails.MRP" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">
                    Description
                </label>
                <InputTextArea id="description" @bind-Value="ProductDetails.Description" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="currency" class="form-label">
                    Currency
                </label>
                <InputSelect id="currency" @bind-Value="ProductDetails.Currency" class="form-control">
                    @foreach (var currency in Enum.GetValues(typeof(CurrencyType)))
                    {
                        <option value="@currency">
                            @currency.ToString()
                        </option>
                    }
                </InputSelect>
            </div>
            <Button class="mt-3" Color="ButtonColor.Success" Type="ButtonType.Button" @onclick="OnClickCallbackHandler">
                Trigger a Parent component method
            </Button>

        </EditForm>
    </div>

</div>



@code {
    [SupplyParameterFromForm]
    [Parameter] public Product ProductDetails { get; set; }

    [Parameter] public EventCallback<Product> OnClickCallback { get; set; }

    private async Task OnClickCallbackHandler()
    {
        await OnClickCallback.InvokeAsync(ProductDetails);
    }
    private void GenerateUniqueSKU()
    {
        string sku;
        bool isUnique;

        do
        {
            sku = GenerateRandomSKU(6);

            isUnique = true;//!await _context.Products.AnyAsync(p => p.SKU == sku);
        }
        while (!isUnique);

        ProductDetails.SKU = sku;
        StateHasChanged();
    }

    // Helper method to generate a random alphanumeric string
    private string GenerateRandomSKU(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    protected override void OnInitialized()
    {

        base.OnInitialized();
    }
}
