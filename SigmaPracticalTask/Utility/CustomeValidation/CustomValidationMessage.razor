@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@typeparam TValue

@if (messages != null && messages.Any())
{
    <ul class="validation-errors">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}

@code {
    [CascadingParameter] private EditContext EditContext { get; set; } = default!;
    [Parameter] public Expression<Func<TValue>> For { get; set; } = default!;

    private IEnumerable<string> messages = default!;

    protected override void OnInitialized()
    {
        if (EditContext == null)
        {
            throw new InvalidOperationException($"{nameof(CustomValidationMessage<TValue>)} requires a cascading parameter of type {nameof(EditContext)}.");
        }

        // Subscribe to the validation state change event
        EditContext.OnValidationStateChanged += ValidationStateChanged;

        // Initial validation check
        var fieldIdentifier = FieldIdentifier.Create(For);
        messages = EditContext.GetValidationMessages(fieldIdentifier);
    }

    private void ValidationStateChanged(object? sender, ValidationStateChangedEventArgs e)
    {
        // Only update validation messages for the specific field
        var fieldIdentifier = FieldIdentifier.Create(For);
        messages = EditContext.GetValidationMessages(fieldIdentifier);
        StateHasChanged();
    }

    public void Dispose()
    {
        // Unsubscribe from the validation state change event to avoid memory leaks
        if (EditContext != null)
        {
            EditContext.OnValidationStateChanged -= ValidationStateChanged;
        }
    }
}
